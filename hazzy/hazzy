#!/usr/bin/env python

#   Copyright (c) 2017 Kurt Jacobson
#      <kurtcjacobson@gmail.com>
#
#   This file is part of Hazzy.
#
#   Hazzy is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 2 of the License, or
#   (at your option) any later version.
#
#   Hazzy is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with Hazzy.  If not, see <http://www.gnu.org/licenses/>.

# Description
#   Hazzy startup script.
#   This script checks package requirements, sets up the system/environment
#   and shows the main window.

import os
import sys
import datetime
import linuxcnc
import traceback

import gi

gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')

from gi.repository import Gtk
from gi.repository import Gdk

from utilities import logger
from utilities import ini_info
from utilities import notifications
from utilities.constants import Paths
from gui.hazzy_window import HazzyWindow

log = logger.get('MAIN')

BASE = None
INIFILE = None

# Log exceptions
def excepthook(exc_type, exc_value, exc_traceback):
    message = traceback.format_exception(exc_type, exc_value, exc_traceback)
    log.critical("".join(message))

# Connect our excepthook handler
sys.excepthook = excepthook

# Check LinuxCNC Version
major, minor, micro = os.environ.get('LINUXCNCVERSION').split('.')
if (int(major), int(minor)) < (2, 8):
    log.critical("LinuxCNC is version {}.{}.{} but hazzy requires LinuxCNC 2.8 or above"
        .format(major, minor, micro))
    sys.exit()

# Check GTK+ Version
major, minor, micro = Gtk.MAJOR_VERSION, Gtk.MINOR_VERSION, Gtk.MICRO_VERSION
if (major, minor) < (3, 20):
    log.critical("GTK+ is version {}.{}.{} but hazzy requires GTK+ 3.20 or above"
        .format(major, minor, micro))
    sys.exit()

def main(argv):

    BASE = os.path.abspath(os.path.dirname(argv[0]))

    if sys.argv[1] != '-ini':
        log.error("-ini must be first argument")
        sys.exit()

    INIFILE = argv[2]

    start_time = datetime.datetime.now()
    log.info("green<Starting>")

    style_provider = Gtk.CssProvider()
    style_provider.load_from_path(os.path.join(Paths.STYLEDIR, "style.css"))

    Gtk.StyleContext.add_provider_for_screen(
        Gdk.Screen.get_default(), style_provider,
        Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
    )

    hazzy_window = HazzyWindow()
    hazzy_window.set_gtk_theme('Adwaita')
    hazzy_window.load_from_xml()
    hazzy_window.show_all()

    hazzy_window.connect('delete-event', quit)

    startup_notification = ini_info.get_startup_notification()
    if startup_notification:
        notifications.show_info(startup_notification, timeout=0)

    startup_warning = ini_info.get_startup_warning()
    if startup_warning:
        notifications.show_warning(startup_warning, timeout=0)

    Gtk.main()

    log.info("red<Quitting>")

    run_time = datetime.datetime.now() - start_time
    log.info("Total session duration: {}".format(run_time))


def quit(window, event):
    try:
        window.save_to_xml()
    except Exception as e:
        log.exception(e)
    Gtk.main_quit()

if __name__ == "__main__":
    main(sys.argv)
